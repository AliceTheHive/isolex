type Mutation {
  emitCommands(commands: [CommandInput]): [Command]
  sendMessages(messages: [MessageInput]): [Message]
}

type Query {
  command(id: String!): Command
  message(id: String!): Message
  service(id: String!): Service
  services: [Service!]!
}

input NameValuePairInput {
  name: String!
  value: String!
}

input NameMultiValuePairInput {
  name: String!
  values: [String!]!
}

input ChannelInput {
  id: String!
  thread: String
}

input ContextInput {
  channel: ChannelInput!
  name: String!
  uid: String!
}

input CommandInput {
  context: ContextInput
  data: [NameMultiValuePairInput!]!
  labels: [NameValuePairInput!]!
  noun: String!
  verb: String!
}

input MessageInput {
  body: String
  context: ContextInput
  labels: [NameValuePairInput!]!
  type: String!
}

interface Labeled {
  id: String!
  labels: [NameValuePair!]!
}

type NameValuePair {
  name: String!
  value: String!
}

type NameMultiValuePair {
  name: String!
  values: [String!]!
}

"RBAC role"
type Role {
  "Shiro-style role grants"
  grants: [String!]!
  "Universally-unique role ID"
  id: String!
  "Unique role name"
  name: String!
}

"RBAC user"
type User {
  "Universally-unique user ID"
  id: String!
  "Unique user name"
  name: String!
  "Role IDs"
  roles: [Role!]
}

"Context channel and thread data"
type Channel {
  id: String!
  thread: String
}

"Context data for a passing event"
type Context {
  channel: Channel!
  id: String!
  name: String!
  uid: String!
  user: User
}

"Command fragment for later completion"
type Fragment implements Labeled {
  data: [NameMultiValuePair!]!
  id: String!
  key: String!
  labels: [NameValuePair!]!
  parserId: String!
}

"Command for execution by the bot"
type Command implements Labeled {
  data: [NameMultiValuePair!]!
  id: String!
  labels: [NameValuePair!]!
  noun: String!
  verb: String!
}

"Message to be parsed or sent by the bot"
type Message implements Labeled {
  body: String
  context: Context
  id: String!
  labels: [NameValuePair!]!
  reactions: [String!]!
  type: String!
}

"Service within the bot"
type Service implements Labeled {
  id: String!
  kind: String!
  labels: [NameValuePair!]!
  name: String!
}