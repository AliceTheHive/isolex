type Mutation {
  emitCommands(commands: [CommandInput]): [Command]
  sendMessages(messages: [MessageInput]): [Message]
}

type Query {
  command(id: String!): Command
  message(id: String!): Message
  service(id: String!): Service
  services: [Service!]!
}

input NameValuePairInput {
  name: String!
  value: String!
}

input NameMultiValuePairInput {
  name: String!
  values: [String!]!
}

input ChannelInput {
  id: String!
  thread: String
}

input ContextInput {
  channel: ChannelInput!
  name: String!
  uid: String!
}

input CommandInput {
  context: ContextInput
  data: [NameMultiValuePairInput!]!
  labels: [NameValuePairInput!]!
  noun: String!
  verb: String!
}

input MessageInput {
  body: String
  context: ContextInput
  labels: [NameValuePairInput!]!
  type: String!
}

interface Labeled {
  id: String!
  labels: [NameValuePair!]!
}

type NameValuePair {
  name: String!
  value: String!
}

type NameMultiValuePair {
  name: String!
  values: [String!]!
}

type Role {
  grants: [String!]!
  id: String!
  name: String!
}

type User {
  id: String!
  name: String!
  roles: [Role!]
}

type Channel {
  id: String!
  thread: String
}

type Context {
  channel: Channel!
  id: String!
  name: String!
  uid: String!
  user: User
}

type Fragment implements Labeled {
  data: [NameMultiValuePair!]!
  id: String!
  key: String!
  labels: [NameValuePair!]!
  parserId: String!
}

type Command implements Labeled {
  data: [NameMultiValuePair!]!
  id: String!
  labels: [NameValuePair!]!
  noun: String!
  verb: String!
}

type Message implements Labeled {
  body: String
  context: Context
  id: String!
  labels: [NameValuePair!]!
  reactions: [String!]!
  type: String!
}

type Service implements Labeled {
  id: String!
  kind: String!
  labels: [NameValuePair!]!
  name: String!
}